module statics/types

imports signatures/Type-sig	
imports signatures/Expression-sig
imports statics/decls

signature
  sorts TYPE ACCESS
  constructors
	CLASS		: scope * ID -> TYPE
	INT			: TYPE
	BOOL		: TYPE
	LIST		: TYPE -> TYPE
	STRING		: TYPE
	FUN			: TYPE * list(TYPE) -> TYPE
	NONETYPE	: TYPE
	EMPTY		: TYPE		
	ITERABLE	: TYPE
	ANY         : TYPE
	INTBOOLSTR	: TYPE
	
	GLOBAL      : ACCESS
	LOCAL       : ACCESS
	NONLOCAL    : ACCESS
		
rules // interface

  typeOk				: scope * Type -> TYPE
  typesOk				  maps typeOk(*, list(*)) = list(*)
  isSubtype				: scope * TYPE * TYPE
  areSubtypes 			: scope * list(TYPE) * list(TYPE)
  areSubtypesBoxing     : scope * list(Exp) * list(TYPE) * list(TYPE)
  leastUpperBound 		: scope * TYPE * TYPE -> TYPE
  leastUpperBounds 		: scope * list(TYPE) -> TYPE
  classSubtype 			: scope * scope -> int
  typeList 				: list((path * (scope))) -> int 
  classLUB 				: scope * int * int * TYPE * TYPE -> TYPE
  notFunctionOrClass 	: TYPE
  listOrString 			: TYPE -> TYPE
  boxIfNeeded           : astId * TYPE * TYPE
  boxExpIfNeeded        : Exp * TYPE * TYPE
  boxExpsIfNeeded       : list(Exp) * list(TYPE) * TYPE
  
rules

  notFunctionOrClass(FUN(_, _)) :- false.
  notFunctionOrClass(_).

  typeOk(s, x@Type("int"))    = INT()         :- @x.type := INT().
  typeOk(s, x@Type("bool"))   = BOOL()        :- @x.type := BOOL().
  typeOk(s, x@Type("str")) 	  = STRING()      :- @x.type := STRING().
  typeOk(s, x@ListType(t)) 	  = LIST(T)       :- @x.type := LIST(T), typeOk(s, t) == T.
  typeOk(s, x@Type(id)) 		  = CLASS(s', id) :- @x.type := CLASS(s', id), resolveClass(s, id) == (s', _).
  typeOk(s, x@TypeS(IdString(id))) = T :-
    typeOk(s, Type(id)) == T,
    @x.type := T.
  
  isSubtype(s, DT, AT) :- leastUpperBound(s, DT, AT) == DT.  
  isSubtype(s, ITERABLE(), LIST(_)).
  isSubtype(s, ITERABLE(), STRING()).
  isSubtype(s, ITERABLE(), EMPTY()).
  isSubtype(s, LIST(T),    LIST(NONETYPE())) :- isSubtype(s, T, NONETYPE()).
  
  isSubtype(s, FUN(_, _), _) :- false.
  isSubtype(s, _, FUN(_, _)) :- false.
  
  areSubtypes(s, [], []).
  areSubtypes(s, [h1 | t1], [h2 | t2]) :-
  	isSubtype(s, h1, h2),
  	areSubtypes(s, t1, t2).
  	
  areSubtypesBoxing(s, [], [], []).
  areSubtypesBoxing(s, [e | t], [h1 | t1], [h2 | t2]) :-
    isSubtype(s, h1, h2),
    boxExpIfNeeded(e, h2, h1),
    areSubtypesBoxing(s, t, t1, t2).

  classSubtype(p, c) = i :- {l}
  	query () filter I I* and { s :- s == p } min $ < I  in c |-> l,
  	i == typeList(l).	
  		
  typeList([]) = 0.
  typeList(_)  = 1.
  
  leastUpperBound(s, T, T) = T.
  leastUpperBound(s, _, _) = CLASS(s_obj, "object") :-
    query class
      filter P* I* and eq("object")
        min $ < I, $ < P and true
          in s |-> [(_, (_, (s_obj, _)))].
  leastUpperBound(_, CLASS(s, id), CLASS(s, id)) = CLASS(s, id).
  
  leastUpperBound(s, P@CLASS(p, id1), C@CLASS(c, id2)) = T :- {i j}
  	classSubtype(p, c) == i,
  	classSubtype(c, p) == j,
  	classLUB(s, i, j, P, C) == T.
  	
  classLUB(s, 0, 0, _, _) = CLASS(s_obj, "object") :-
    query class
      filter P* I* and {x :- x == "object"}
        min $ < I, $ < P and true
          in s |-> [(_, (_, (s_obj, _)))].
  classLUB(s, 1, 0, P, _) = P.
  classLUB(s, 0, 1, _, C) = C.

  leastUpperBound(s, CLASS(c, id), NONETYPE())   = CLASS(c, id).
  leastUpperBound(s, EMPTY(), 		NONETYPE())   = EMPTY().
  leastUpperBound(s, LIST(t), 		NONETYPE())   = LIST(t).
  leastUpperBound(s, NONETYPE(), 	CLASS(c, id)) = CLASS(c, id).
  leastUpperBound(s, NONETYPE(), 	EMPTY())      = EMPTY().
  leastUpperBound(s, NONETYPE(), 	LIST(t))      = LIST(t).

  leastUpperBound(s, LIST(t), EMPTY()) = LIST(t).
  leastUpperBound(s, EMPTY(), LIST(t)) = LIST(t).
  
  leastUpperBounds(s, [T1, T2]) = T :- 
  	leastUpperBound(s, T1, T2) == T.
  	
  leastUpperBounds(s, [T1, T2 | t]) = T :- {Temp}
  	leastUpperBound(s, T1, T2) == Temp,
  	leastUpperBounds(s, [Temp | t]) == T.
  	
  listOrString(LIST(T))  = T.
  listOrString(STRING()) = STRING().
  
  boxIfNeeded(x, INT(), CLASS(_, "object")) :- @x.box += "int".
  boxIfNeeded(x, BOOL(), CLASS(_, "object")) :- @x.box += "bool".
  boxIfNeeded(x, STRING(), CLASS(_, "object")) :- @x.box += "str".
  boxIfNeeded(x, LIST(_), CLASS(_, "object")) :- @x.box += "list".
  boxIfNeeded(x, CLASS(_, "object"), CLASS(_, "object")).
  boxIfNeeded(x, CLASS(s1, _), CLASS(_, "object")) :- {p s2}
    query class
      filter P* I* and eq("object")
        min $ < I, $ < P and true
          in s1 |-> [(_, (_, (s2, _)))],
    query ()
      filter I* and eq(s2)
        min $ < I and true
          in s1 |-> [(p, _)],
    @x.box += "class",
    @x.scope := s1,
    @x.path := p.
  boxIfNeeded(x, CLASS(s1, _), CLASS(s2, _)) :- {p}
    query ()
      filter I* and eq(s2)
        min $ < I and true
          in s1 |-> [(p, _)],
    @x.box += "class",
    @x.scope := s1,
    @x.path := p.
  boxIfNeeded(x, _, _) :- @x.box += "other".
  boxIfNeeded(x, T, T).
  
  // need to special case injections, since their annotations disappear after implication
  // see https://github.com/metaborg/nabl/issues/98 for background/discussion
  boxExpIfNeeded(Literal2Exp(x), a, b) :- boxIfNeeded(astId(x), a, b).
  boxExpIfNeeded(Index2Exp(x), a, b) :- boxIfNeeded(astId(x), a, b).
  boxExpIfNeeded(Var2Exp(x), a, b) :- boxIfNeeded(astId(x), a, b).
  boxExpIfNeeded(Member2Exp(x), a, b) :- boxIfNeeded(astId(x), a, b).
  boxExpIfNeeded(x, a, b) :- boxIfNeeded(astId(x), a, b).
  
  boxExpsIfNeeded([], [], _).
  boxExpsIfNeeded([a|tl], [T|ttl], ET) :- boxExpIfNeeded(a, T, ET), boxExpsIfNeeded(tl, ttl, ET).