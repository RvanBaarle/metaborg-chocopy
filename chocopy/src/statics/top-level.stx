module statics/top-level

imports
	signatures/Type-sig
	signatures/Program-sig
	signatures/Common-sig
	signatures/Definition-sig
	signatures/Expression-sig
	signatures/Statement-sig
	signatures/chocopy-sig
	signatures/ID-sig
	
	statics/expressions
	statics/decls
	statics/types
	statics/stmts
	statics/statics

rules // interface
  
  defOk				: scope  * Definition * int -> int
  defsOk 			: scope * list(Definition) * int -> int
  
  classOk 			: scope * ClassDef * int
  funcOk			: scope * scope * scope * FuncDef
  varOk				: scope * VarDef -> TYPE
  
  parentOk 			: scope * scope * ID * int
  bodyOk 			: scope * scope * ClassBody * ID
  classBodyMemberOk 	: scope * scope * ClassBodyMember * ID
  classBodyMembersOk  maps classBodyMemberOk(*, *, list(*), *)
  
  funcBodyMemberOk 	: scope * scope * scope * FuncBodyMember 
  funcBodyMembersOk 	  maps funcBodyMemberOk(*, *, *, list(*))   
  argOk 			: scope * scope * TypedVar -> TYPE
  argsOk 			  maps argOk(*, *, list(*)) = list(*)
  retOk 			: scope * RetType -> TYPE
  initOk			: ID * list(TYPE)
  
  noneReturnOk      : scope * TYPE * int

rules // programOk

  programOk(p@Program(stub, defs, stmts)) :- {s obj_s}
  	new s,
  	new obj_s,
  	defsOk(s, defs, 1) == _,
  	stmtsOk(s, 0, stmts, NONETYPE()),

  	!var["int", FUN(INT(), [])] in s,
  	!var["bool", FUN(BOOL(), [])] in s,
  	!var["str", FUN(STRING(), [])] in s,
  	!var["object", FUN(CLASS(obj_s, "object"), [])] in s,
  	!var["len", FUN(INT(), [CLASS(obj_s, "object")])] in s,
  	!var["print", FUN(NONETYPE(), [CLASS(obj_s, "object")])] in s,
  	!var["input", FUN(STRING(), [])] in s,
  	!member["__type__", STRING()] in obj_s,
  	!member["__value__", ANY()] in obj_s,
  	!member["__init__", FUN(NONETYPE(), [])] in obj_s,
  	!class["object", (obj_s, 0)] in s,
  	@p.scope := s,
  	@stub.scope := obj_s.
  	
rules // definitions

  defOk(s, VarDef2Definition(v), i) = i :- varOk(s, v) == _.
  
  defOk(s, FuncDef2Definition(f), i ) = i :- {s'}
  	new s', s' -P-> s,
  	funcOk(s, s, s', f).
  	
  defOk(s, ClassDef2Definition(c), i) = j :- 
  	classOk(s, c, i),
  	j == #(i + 1).
  	
  defsOk(s, [], i) = i.
  defsOk(s, [d], i) = j :- defOk(s, d, i) == j.
  defsOk(s, [d | t], i) = j :- {temp} 
  	defOk(s, d, i) == temp,
  	defsOk(s, t, temp) == j.
  
rules // classes

  classOk(s, c@ClassDef(id, parent, body), i) :- {s' p}
  	new s',
  	declClass(s, s', id, i),
  	declClassFun(s, id, FUN(CLASS(s', id), [])),
  	parentOk(s, s', parent, i),
  	bodyOk(s, s', body, id),
  	@c.members := resolveMembers(s'),
  	@c.methods := resolveMemberFuns(s'),
  	@c.scope := s',
  	@c.path := p, //HACK: need to get this path somehow attached to the AST, this is a bad method
  	query ()
  	  filter I and true
  	    in s' |-> [(p, _)].
  
  parentOk(s, s_c, id, i) :- {is i'}
  	resolveClass(s, id) == (is, i'),
  	s_c -I-> is,
 	i' #< i | error $[Class [id] is not yet defined],
  	query () filter I* and { x :- x == s_c } min $ < I  in is |-> [] 
  	    | error $[A class cannot extend itself or its subclass].
  	
  bodyOk(_, _, Pass2ClassBody(Pass()), _).
  
  bodyOk(gs, cs, ClassBodyMembers2ClassBody(l), cn) :- 
    classBodyMembersOk(gs, cs, l, cn).
  
  classBodyMemberOk(gs, cs, VarDef2ClassBodyMember(VarDef(TypedVar(id, type), literal)), _) :- {T LT} @id.type := T,
  	typeOk(gs, type) == T,
  	literalOk(literal) == LT,
  	isSubtype(gs, T, LT),
  	declMember(cs, id, T).
  	
  classBodyMemberOk(gs, cs, FuncDef2ClassBodyMember(f@FuncDef(id, args, ret, FuncBody(defs, stmts))), cn) :- {RT ATs s t tail x} @id.type := FUN(RT, ATs),
  	new s, s -P-> gs,
  	retOk(gs, ret) == RT,
  	argsOk(gs, s, args) == ATs@[t | tail],
  	initOk(id, tail),
  	declMember(cs, id, FUN(RT, tail)),
  	funcBodyMembersOk(gs, gs, s, defs),
  	stmtsOk(s, 1, stmts, RT),
  	try { t == CLASS(cs, cn) } | error $[First argument of function [id] needs to be of the enclosing class],
  	actuallyReturns(0, stmts) == x,
  	noneReturnOk(gs, RT, x) | error $[Every path in function [id] needs a return statement],
  	@f.vars := resolveVars(s),
  	@f.funs := resolveFuns(s),
  	@f.scope := s,
  	resolveMemberPath(cs, id, _, FUN(RT, ATs)).
  	
  initOk("__init__", [H | T]) :- 
  	false | error $[Constructor only takes 1 parameter: self].
  initOk(_, _).
  	
  noneReturnOk(s, T, 1).
  
  noneReturnOk(s, T, 0) :- isSubtype(s, T, NONETYPE()).
  	
rules // functions  	

  funcOk(gs, us, s, f@FuncDef(id, args, ret, FuncBody(defs, stmts))) :- {RT ATs x} @id.type := FUN(RT, ATs),
  	retOk(us, ret) == RT,
  	argsOk(us, s, args) == ATs,
  	declFun(us, id, FUN(RT, ATs)),
  	funcBodyMembersOk(gs, us, s, defs),
  	stmtsOk(s, 1, stmts, RT),
  	actuallyReturns(0, stmts) == x,
  	noneReturnOk(gs, RT, x) | error $[Every path in function [id] needs a return statement],
  	@f.scope := s.
  	

  funcBodyMemberOk(gs, us, s, Global(id)) :- {T s' o}
  	resolveVar(gs, id) == (T, s', o),
  	notFunctionOrClass(T) | error $[Not a variable [id]],
  	!access[id, GLOBAL()] in s.
  	
  funcBodyMemberOk(gs, us, s, Nonlocal(id)) :- {T s' o}
  	resolveVar(us, id) == (T, s', o),
  	notFunctionOrClass(T) | error $[Not a variable [id]],
  	try { gs != s' } | error $[Not a nonlocal variable [id]],
  	!access[id, NONLOCAL()] in s.
  
  funcBodyMemberOk(gs, us, s, VarDef2FuncBodyMember(v@VarDef(TypedVar(id, type), literal))) :- {T}
  	varOk(s, v) == T.
  	
  funcBodyMemberOk(gs, us, s, FuncDef2FuncBodyMember(f)) :- {s'}
  	new s', s' -P-> s,
  	funcOk(gs, s, s', f).
  	
  
  argOk(us, s, TypedVar(id, t)) = T :- @id.type := T,
  	typeOk(us, t) == T,
  	declVar(s, id, T, id).
  
  retOk(s, ReturnsNone()) = NONETYPE().
  retOk(s, Returns(t)) = T :- typeOk(s, t) == T.
  
  varOk(s, VarDef(v@TypedVar(id, type), literal)) = T :- {LT} @id.type += T,
  	typeOk(s, type) == T,
  	literalOk(literal) == LT,
  	isSubtype(s, T, LT),
  	boxIfNeeded(astId(literal), LT, T),
  	declVar(s, id, T, id).
  	  	
