module dynamics/main

imports
  signatures/chocopy-sig
  
  dynamics/stdlib
  dynamics/native
  
  dynamics/defs
  dynamics/exps
  dynamics/stmts
  dynamics/scope
  
// semantic types, correspond to the statix types
signature
  sorts TYPE Scope
  constructors
    CLASS       : Scope * ID -> TYPE
    INT         : TYPE
    BOOL        : TYPE
    LIST        : TYPE -> TYPE
    OBJECT      : TYPE
    FUN         : TYPE * List(TYPE) -> TYPE
    NONETYPE    : TYPE
    EMPTY       : TYPE      
    ITERABLE    : TYPE
    INTBOOLSTR  : TYPE
    STRING      : TYPE
  constructors
    STRINGLITERAL      : string -> STRINGLITERAL
  
constraint-analyzer
  property box :: 'string
  property type :: 'TYPE
  property vars :: ('ID * 'TYPE)
  property funs :: ('ID * 'TYPE)
  property members :: ('ID * 'TYPE)
  property methods :: ('ID * 'TYPE)
  property path :: 'Path

rules
  $return :: @cval
  $raise :: @cval
  $frame :: @cval
  $frameT :: @ctype

  compileProgram :: 'Program -> Pluggable
  
  compileProgram(p@Program(defs, stmts)) = {
    builtins()
    frameT <- compileFrameType(fresh-typevar(frame), vars(p), [])
    frame <- #struct-new<frameT>()
    classConstructors()
    with $frame = frame, $frameT = frameT, $raise = var('"$err_unhandledexn"), $return = var('"$dummy_toplevelreturn") do {
      fundefs <- compileFunDefs(defs)
      compileNonFunDefs(defs)
      fix { fundefs }
      compileStmts(stmts)
    }
  }