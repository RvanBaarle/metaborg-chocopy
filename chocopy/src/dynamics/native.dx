module native

imports
  stdlib
  main

rules
  builtins :: @cval -> Pluggable
  builtins(frame) = {
    pyint <- fresh-var(pyint)
    pybool <- fresh-var(pybool)
    pystr <- fresh-var(pystr)
    object <- var('"$fn_object")
    len <- fresh-var(len)
    print <- fresh-var(print)
    arg <- fresh-var(arg)
    cont <- fresh-var(cont)
    throw <- fresh-var(throw)
    
    fix {
      fun var('"$err_oob")([]) = {
        #print(str('"Index out of bounds"))
        #print(str('"Exited with error code 3\n"))
        #exit()
      }
      fun var('"$err_div0")([]) = {
        #print(str('"Division by zero\n"))
        #print(str('"Exited with error code 2\n"))
        #exit()
      }
      fun var('"$err_invalidarg")([]) = {
        #print(str('"Invalid argument\n"))
        #print(str('"Exited with error code 1\n"))
        #exit()
      }
      fun var('"$err_unhandledexn")([fresh-var(a)]) = {
        #print(str('"Unhandled exception\n"))
        #exit()
      }
      fun var('"$err_none")([]) = {
        #print(str('"Operation on None\n"))
        #print(str('"Exited with error code 4\n"))
        #exit()
      }
    }
    fix {
      fun pyint([cont, throw]) = cont@([int('0)])
      fun pybool([cont, throw]) = cont@([int('0)])
      fun pystr([cont, throw]) = cont@([str('"")])
      fun object([cont, throw]) = {
        obj <- create-scope!($object, ['"statics/decls!member"])
        init <- fresh-var(init)
        cont2 <- fresh-var(cont)
        throw2 <- fresh-var(throw)
        fix {
          fun init([cont2, throw2]) = {
             cont2@([null])
          }
        }
        #struct-write(obj, symbol('"__type__"), str('"object"))
        #struct-write(obj, symbol('"__init__"), init)
        {
          init@([ret, throw])
        } label ret/1:
        cont@([obj])
      }
      fun len([arg, cont, throw]) = {
        type <- #struct-read(arg, symbol('"__type__"))
        if #str-eq(type, str('"list")) then {
          val <- #struct-read<array<any>>(arg, symbol('"__value__"))
          if #is-null(val) then {
            var('"$err_none")@([])
          } else {
            length <- #array-length(val)
            cont@([length])
          }
        } else {
          if #str-eq(type, str('"str")) then {
            val2 <- #struct-read<string>(arg, symbol('"__value__"))
            length2 <- #str-length(val2) 
            cont@([length2])
          } else {
            var('"$err_invalidarg")@([])
          }
        }
      }
      fun print([arg, cont, throw]) = {
        type <- #struct-read(arg, symbol('"__type__"))
        if #str-eq(type, str('"int")) then {
          val <- #struct-read<int>(arg, symbol('"__value__"))
          #print(val)
          #print(str('"\n"))
          cont@([null])
        } else {
          if #str-eq(type, str('"str")) then {
            val2 <- #struct-read<string>(arg, symbol('"__value__"))
            #print(val2)
            #print(str('"\n"))
            cont@([null])
          } else {
            if #str-eq(type, str('"bool")) then {
              val3 <- #struct-read<int>(arg, symbol('"__value__"))
              if #int-neq(val3, int('0)) then {
                #print(str('"True\n"))
                cont@([null])
              } else {
                #print(str('"False\n"))
                cont@([null])
              }
            } else {
              var('"$err_invalidarg")@([])
            }
          }
        }
      }
    }
    
    #struct-write(frame, symbol('"int"), pyint)
    #struct-write(frame, symbol('"bool"), pybool)
    #struct-write(frame, symbol('"str"), pystr)
    #struct-write(frame, symbol('"object"), object)
    #struct-write(frame, symbol('"len"), len)
    #struct-write(frame, symbol('"print"), print)
  }
  
  assertNotNone :: @cval -> Pluggable
  assertNotNone(v) =  {
    if #is-null(v) then {
      var('"$err_none")@([])
    } else {
      after@([])
    }
  } label after/0:
  
  assertArrayWithinBounds :: @cval * @cval -> Pluggable
  assertArrayWithinBounds(arr, idx) = {
    len <- #array-length(arr)
    if #int-lt(idx, int('0)) then {
      var('"$err_oob")@([])
    } else {
      if #int-geq(idx, len) then {
        var('"$err_oob")@([])
      } else {
        after@([])
      }
    }
  } label after/0:
  
  assertStringWithinBounds :: @cval * @cval -> Pluggable
  assertStringWithinBounds(s, idx) = {
    len <- #str-length(s)
    if #int-lt(idx, int('0)) then {
      var('"$err_oob")@([])
    } else {
      if #int-geq(idx, len) then {
        var('"$err_oob")@([])
      } else {
        after@([])
      }
    }
  } label after/0:
  
  assertDivNotZero :: @cval -> Pluggable
  assertDivNotZero(v) = {
    if #int-eq(v, int('0)) then {
      var('"$err_div0")@([])
    } else {
      after@([])
    }
  } label after/0:
  
  mod :: @cval * @cval -> Pluggable(@cval)
  mod(a, b) = {
    full_parts <- #int-div(a, b)
    full <- #int-mul(full_parts, b)
    #int-sub(a, full)
  }
  
rules
  boxInt :: @cval -> Pluggable(@cval)
  boxInt(v) = {
    struct <- {var('"$fn_object")@([cont, $raise]) label cont/1: }
    #struct-write(struct, symbol('"__type__"), str('"int"))
    #struct-write(struct, symbol('"__value__"), v)
    struct
  }
  
  boxString :: @cval -> Pluggable(@cval)
  boxString(v) = {
    struct <- {var('"$fn_object")@([cont, $raise]) label cont/1: }
    #struct-write(struct, symbol('"__type__"), str('"str"))
    #struct-write(struct, symbol('"__value__"), v)
    struct
  }
  
  boxBool :: @cval -> Pluggable(@cval)
  boxBool(v) = {
    struct <- {var('"$fn_object")@([cont, $raise]) label cont/1: }
    #struct-write(struct, symbol('"__type__"), str('"bool"))
    #struct-write(struct, symbol('"__value__"), v)
    struct
  }
  
  boxList :: @cval -> Pluggable(@cval)
  boxList(v) = {
    struct <- {var('"$fn_object")@([cont, $raise]) label cont/1: }
    #struct-write(struct, symbol('"__type__"), str('"list"))
    #struct-write(struct, symbol('"__value__"), v)
    struct
  }
