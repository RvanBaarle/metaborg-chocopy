module defs

imports
  stdlib
  native
  
  exps
  stmts
  
  scope
  main
  
  signatures/Definition-sig
  
rules
  compileNonFunDef :: 'Definition -> Pluggable
  
  // for every classdef we compile the following:
  // $initialize_<name>: takes a self ptr, vtbl ptr and initializes fields
  // <name>: allocates, calls $initialize_<name>, calls constructor
  compileFunDef(c@ClassDef(name, super, body)) = {
    builder <- var('"$build_" + name)
    initer <- var('"$init_" + name)
    init <- fresh-var(init)
    self <- fresh-var(self)
    cont <- fresh-var(cont)
    throw <- fresh-var(throw)
    
    fix {
      fun builder([cont]) = {
        parent_init <- var('"$build_" + super)
        parent <-
          parent_init@([ret])
          label ret/1:
        this <- using scope!(super, parent)
          create-scope!(c, ['"statics/decls!member"])
        
        using scope!(c, this) {
          compileClassInitialize(this, body)
        }
        cont@([this])
      }
      fun initer([self, cont, throw]) = {
        parent <- using scope!(c, self)
          read-scope!(c)  // Scope of parent, hackily and unintuitively acquired
        
        var('"$init_" + super)@([parent, cont, throw])
      }
      fun init([cont, throw]) = {
        this <- builder@([ret]) label ret/1:
        initer@([this, ret, throw]) label ret/1:
        cont@([this])
      }
    }
    write-var!(name, init)
  }
  
  compileClassInitialize :: @cval * 'ClassBody -> Pluggable
  compileClassInitialize(_, Pass()) = hole
  compileClassInitialize(self, members@[_|_]) = compileClassMembers(self, members)
  
  compileClassMembers :: @cval * List('ClassBodyMember) -> Pluggable
  compileClassMembers(_, []) = hole
  compileClassMembers(self, [VarDef(TypedVar(name, _), lit)|rest]) = {
    lv <- compileLiteral(lit)
    write-var!(name, lv)
    compileClassMembers(self, rest)
  }
  compileClassMembers(this, [f@FuncDef(n, [TypedVar(self, _)|args], _, body)|rest]) = {
    return <- fresh-var(return)
    throw <- fresh-var(throw)
    fn <- fresh-var(memberfn)
    
    // todo: can we eliminate duplication here?
    fix {
      fun fn(idsToVars(args) ++ [return, throw]) = {
        frame <- create-scope!(f, ['"statics/decls!var"])
        using scope!(f, frame) 
        with $return = return, $raise = throw do {
          write-var!(self, this)
          wrapIdsInFrame(args)
          compileFuncBody(body)
        }
        return@([null])
      }
    }
    
    write-var!(n, fn)
      
    compileClassMembers(this, rest)
  }
  
  compileNonFunDef(VarDef(TypedVar(name, _), val)) = {
    v <- compileLiteralBoxing(val)
    write-var!(name, v)
  }
  
  compileNonFunDef(VarDef(TypedVar(name, _), NONE())) = hole  // TODO: fix None
  
  compileNonFunDef(FuncDef(_, _, _, _)) = hole
  compileNonFunDef(ClassDef(_, _, _)) = hole
  
  wrapIdsInFrame :: List('TypedVar) -> Pluggable
  wrapIdsInFrame([]) = hole
  wrapIdsInFrame([TypedVar(h, _)|t]) = {
    write-var!(h, var(h))
    wrapIdsInFrame(t)
  }
  
  idsToVars :: List('TypedVar) -> List(@cval)
  idsToVars([]) = []
  idsToVars([TypedVar(a, _)|t]) = [var(a)|idsToVars(t)]
  
  compileFuncBody :: 'FuncBody -> Pluggable
  compileFuncBody(FuncBody(defs, stmts)) = {
    compileNonFunFuncBodyMembers(defs)
    compileFunFuncBodyMembers(defs)
    compileStmts(stmts)
  }
  
  // this grammar man..
  compileNonFunFuncBodyMember :: 'FuncBodyMember -> Pluggable
  compileNonFunFuncBodyMember(Global(_)) = hole
  compileNonFunFuncBodyMember(Nonlocal(_)) = hole
  compileNonFunFuncBodyMember(a@VarDef(_, _)) = compileNonFunDef(a)
  compileNonFunFuncBodyMember(a@FuncDef(_, _, _, _)) = hole
  
rules
  compileFunDef :: 'Definition -> Pluggable
  compileFunDef(f@FuncDef(n, args, _, body)) = {
    return <- fresh-var(return)
    throw <- fresh-var(throw)
    name <- var('"$fn_" + n)
    //hole // TODO: this hole should not be needed here
    fix {
      fun name(idsToVars(args) ++ [return, throw]) = {
        frame <- create-scope!(f, ['"statics/decls!var"])

        using scope!(f, frame)
        with $return = return, $raise = throw do {
          wrapIdsInFrame(args)
          compileFuncBody(body)
        }
        return@([null])
      }
    }
    write-var!(n, name)
  }
  compileFunDef(_) = hole
  
  compileFuncBodyMemberFunDef :: 'FuncBodyMember -> Pluggable
  compileFuncBodyMemberFunDef(d@FuncDef(_, _, _, _)) = compileFunDef(d)
  compileFuncBodyMemberFunDef(_) = hole
  
rules
  compileNonFunDefs :: List('Definition) -> Pluggable
  compileNonFunDefs([]) = hole
  compileNonFunDefs([h|tl]) = {
    compileNonFunDef(h)
    compileNonFunDefs(tl)
  }
  
  compileFunDefs :: List('Definition) -> Pluggable
  compileFunDefs([]) = hole
  compileFunDefs([h|t]) = {
    compileFunDef(h)
    compileFunDefs(t)
  }
  compileFunDefs([h@FuncDef(_, _, _, _)|t]) = {
    compileFunDef(h)
    compileFunDefs(t)
  }
  
  compileNonFunFuncBodyMembers :: List('FuncBodyMember) -> Pluggable
  compileNonFunFuncBodyMembers([]) = hole
  compileNonFunFuncBodyMembers([h|tl]) = {
    compileNonFunFuncBodyMember(h)
    compileNonFunFuncBodyMembers(tl)
  }
  
  compileFunFuncBodyMembers :: List('FuncBodyMember) -> Pluggable
  compileFunFuncBodyMembers([]) = hole
  compileFunFuncBodyMembers([h|t]) = {
    compileFuncBodyMemberFunDef(h)
    compileFunFuncBodyMembers(t)
  }